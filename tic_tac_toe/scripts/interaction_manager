#!/usr/bin/env python
import rospy
import sys
import tic_tac_toe.game_agent
from tic_tac_toe.msg import GameState
from tic_tac_toe.srv import ExecuteGameAction
from tic_tac_toe import state_estimation

from tic_tac_toe.game_state_utils import *

import datetime

def play_game():
    state_estimator.should_listen_for_state = True
    last_state = None
    while not rospy.is_shutdown():
        # Detect change
        state_estimator.state_change_event.wait()
        state_estimator.should_listen_for_state = False
        state = state_estimator.state_estimate
        if last_state is not None:
            valid = is_valid_transition(last_state, state) or is_two_step_transition(last_state, state)
            if not valid:
                # Reject the transition
                state_estimator.should_listen_for_state = True
                continue

        last_state = state
        current_turn = whose_turn_is_it(state, first_piece_type)
        if current_turn == robot_color:
            # Calculate move
            move = tic_tac_toe.game_agent.getMove(state, robot_color)
            action_start = datetime.datetime.now()
            continue_game = executor(move)
            delta = datetime.datetime.now() - action_start
            print(delta.total_seconds())
            # If game is done, end          
            if move == -1:
                print("game done")
                break
        else:
            rospy.loginfo("Detected my own move")

        state_estimator.should_listen_for_state = True

if __name__ == "__main__":
    rospy.init_node("interaction_manager")
    rospy.loginfo("Waiting for messages and services...")
    while not rospy.is_shutdown():
        try:
            rospy.wait_for_service('execute_game_action', 10)
            received = rospy.wait_for_message("game_state", GameState, 10)
            if received is not None:
                break
            else:
                rospy.logwarn("Couldn't get messages and service handles. Retrying...")
        except rospy.ROSException as e:
            rospy.logwarn("Couldn't get messages and service handles. Retrying...")
        
    executor = rospy.ServiceProxy('execute_game_action', ExecuteGameAction)
    state_estimator = state_estimation.StateEstimator("game_state")
    robot_color = rospy.get_param("~/robots_color", RED)
    robot_plays_first = rospy.get_param("~/robot_goes_first", False)

    opponent_color = BLUE if robot_color is RED else RED
    first_piece_type = robot_color if robot_plays_first else opponent_color

    while not rospy.is_shutdown():
        rospy.loginfo("Ready")
        rospy.loginfo("Press enter to begin")
        _ = raw_input()
        start_time = datetime.datetime.now()
        play_game()
        duration = datetime.datetime.now() - start_time
        print(duration.total_seconds())

    state_estimator.should_shutdown.set()
    
